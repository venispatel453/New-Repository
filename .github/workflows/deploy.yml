name: Deploy to Amazon ECS
on:
  push:
    branches:
      - main

# Environment Variables
env:
  AWS_REGION: ap-south-1
  ECS_SERVICE_FRONTEND: frontend-service 
  ECS_SERVICE_BACKEND: backend-service 
  ECS_CLUSTER: VenisECSClusterProject
  CONTAINER_NAME_FRONTEND: frontend
  CONTAINER_NAME_BACKEND: backend

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Configuring AWS Credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with: 
          mask-password: 'true'

      # Build and pushing frontend image to ECR
      - name: Build, tag, and push frontend image to Amazon ECR
        id: build-frontend-image
        env: 
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
          REPOSITORY: frontend
        run: |
          docker build -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG -f frontend/Dockerfile .
          docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "frontend_image=$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      # Build and pushing frontend image to ECR
      - name: Build, tag, and push backend image to Amazon ECR
        id: build-backend-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
          REPOSITORY: backend
        run: |
          docker build -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG -f backend/Dockerfile .
          docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "backend_image=$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      # Attaching Frontend Image to task definition 
      - name: Fill in the new frontend image ID in the Amazon ECS task definition
        id: task-def-frontend
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: frontend-task-definition.json
          container-name: ${{ env.CONTAINER_NAME_FRONTEND }}
          image: ${{ steps.build-frontend-image.outputs.frontend_image }}

      # Attaching Backend Image to task definition 
      - name: Fill in the new backend image ID in the Amazon ECS task definition
        id: task-def-backend
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: backend-task-definition.json
          container-name: ${{ env.CONTAINER_NAME_BACKEND }}
          image: ${{ steps.build-backend-image.outputs.backend_image }}

      # Deploying frontend task definition of frontend 
      - name: Deploy Amazon ECS Task Definitions for Frontend
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-frontend.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_FRONTEND }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      # Deploying frontend task definition of backend 
      - name: Deploy Amazon ECS Task Definitions for Backend
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-backend.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_BACKEND }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
